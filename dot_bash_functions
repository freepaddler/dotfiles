# temporary history control
hoff() {
    set +o history
}
hon() {
    set -o history
}

# generate passwords
apg() {
    echo
    i=0
    while [ $i -lt 20 ]; do
        openssl rand -base64 $((((i / 5) + 2) * 3))
        i=$((i + 1))
    done
}

# random hex string
rand_x() {
    cat /dev/urandom | LC_CTYPE=POSIX tr -dc 'a-f0-9' | fold -w $1 | head -n 1
}

# remote local install chezmoi
ssh-chezmoi() {
    ssh "$@" 'sh <(curl -fsLS get.chezmoi.io/lb || wget -qO- get.chezmoi.io/lb) -- init --purge --force --apply freepaddler'
}
has_completion ssh && $(get_completion ssh) ssh-chezmoi

# curl with time report
curl-time() {
    curl -w @- -o /dev/null -s "$@" << EOF
    time_namelookup:  %{time_namelookup}\n
       time_connect:  %{time_connect}\n
    time_appconnect:  %{time_appconnect}\n
   time_pretransfer:  %{time_pretransfer}\n
      time_redirect:  %{time_redirect}\n
 time_starttransfer:  %{time_starttransfer}\n
                    ----------\n
         time_total:  %{time_total}\n
EOF
}

# copy local env to remote host
ssh-cp-env() {
    scp -r ~/.bashrc ~/.bash_profile ~/.bash_functions ~/.screenrc ~/.inputrc ~/.vimrc ~/.tmux.conf ~/.bash_completion.d "$1":.
    ssh "$1" mkdir -p .vim/colors/ .ssh/
    scp -r ~/.vim/colors ~/.vim/autoload "$1":.vim/
    scp ~/.ssh/authorized_keys "$1":.ssh/
}
has_completion ssh && $(get_completion ssh) ssh-cp-env

# delete record from known_hosts
ssh-del-knownhost() {
    if [ $# -eq 0 ]; then
        echo "nothing to delete from known_hosts"
        exit 1
    else
        for h in "$@"; do
            echo "deleting '$h' from known_hosts"
            sed -ri '' "/^\[?$h(\ |\])/d" "$HOME/.ssh/known_hosts" 2>/dev/null || sed -i "/^\[?$h(\ |\])/d" "$HOME/.ssh/known_hosts" 2>/dev/null
        done
    fi
}
has_completion ssh && $(get_completion ssh) ssh-del-knownhosts

# run shell script(s) over ssh
ssh-run() {
    ssh_string="ssh"
    while [ $# -gt 0 ]; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                ssh_string=${ssh_string:+$ssh_string $1}
                ;;
        esac
        shift
    done;
    echo "=== === ssh connection string: '$ssh_string'"

    [ $# -eq 0 ] && { echo "=== === ERROR: no scripts to run. Usage: ssh-run.sh <ssh connection options> -- <path/to/script(s)>"; exit 1; }
    for script in "$@"; do
        if [ -f "$script" ] && [ -x "$script" ]; then
            echo "=== === running '$script' on remote"
            $ssh_string '/bin/sh -s' < "$script" || { echo "=== === ERROR: script execution failed "; exit 1; }
        else
            echo "=== === can't find or not executable '$script'"
        fi
    done

    echo "=== === finished"
}
has_completion ssh && $(get_completion ssh) ssh-run

# short emacs-style help
hlp() {
    local b="\033[1m"
    local r="\033[0m"
    echo -ne "${b} SHELL Quick Help${r}
\t\t\t${b}MOVING${r}
${b}C-a / C-e${r} — start/end of line\t\t${b}C-f / C-b${r} — one char fwd/bwd
${b}M-f / M-b${r} — one word fwd/bwd\t\t${b}C-l${r} - cls & leave current line
${b}C-x C-x${r} - move to the start of line and back to current position
${b}M-<space>${r} - mark position to jump instead of start of the line
\t\t\t${b}CHANGE TEXT
${b}C-d / C-h${r} - delete/backspace\t\t${b}C-x C-u${r} - undo
${b}C-t / M-t${r} - change current character/word with previous one
${b}M-u / M-l /M-c${r} - upcase/downcase/capitalize word from current position
\t\t\t${b}KILL & YANK
${b}C-k / C-u${r} - kill to line end/start\t${b}C-y${r} - yank last killed text
${b}M-d / C-w${r} - delete from position to the end/start of word
\t\t\t${b}HISTORY
${b}M-.${r} - paste last arg\t\t\t${b}M-C-y${r} 1st arg of prev command
${b}PgUp / PgDn${r} - hist rev/fwd search\t${b}C-p / C-n${r} - prev/next command
${b}C-r${r} - incremental reverse search\t${b}C-j${r} - stop search and edit
\t\t\t${b}COMPLETIONS
${b}M-/ / M-\$ / M-!${r} - complete filename/variable/command
${b}M-TAB${r} - attempt complete with previous matches
\t\t\t${b}MISC
${b}M-#${r} - comment line\t\t\t${b}C-t${r} - send SIGINFO
${b}C-c / C-z / C-d${r} - SIGINT / SIGTSTP (suspend) / EOF - soft exit
${b}C-x C-e${r} - open $EDITOR to modify command, execute upon exit
\t\t\t${b}SPECIAL VARS
${b}\$?${r} - exit status of last command\t${b}%% / %n${r} - last/n job pid
${b}\$!${r} - last backgroud command pid\t\t${b}\$\$${r} - current shell pid
${b}!!${r} - previous command line\t\t${b}!:0${r} - name of prev command
${b}!:1 / !:-1 / !:*${r} - 1st(2nd..)/last/all params of prev command
"
    #${b}M-< / M->${r} - move to hist first/last line
    #${b}C-r / C-s${r} - incremental rev/fwd search
}
