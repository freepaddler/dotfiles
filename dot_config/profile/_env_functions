## _env helpers

_env_debug() {
    [ -z "$DOTFILES_DEBUG" ] || echo "[env debug]" "$@"
}

DOTFILES_OS="$(uname -s 2>/dev/null | tr 'A-Z' 'a-z')"
[ -n "$DOTFILES_OS" ] || DOTFILES_OS=unknown
export DOTFILES_OS

# add function or variable to unset list
_env_cleanup_add() {
   _ENV_CLEANUP="$_ENV_CLEANUP $*"
}

# should be called at the very end .profile
_env_cleanup() {
    _env_cleanup_add _env_cleanup_add
    _env_cleanup_add _env_cleanup
    _env_cleanup_add _env_debug
    for v in $_ENV_CLEANUP; do
        _env_debug "cleanup $v"
        unset "$v";
    done
    unset _ENV_CLEANUP v
}

# check command exists
_env_cleanup_add _env_cmd
_env_cmd() {
    command -v "$1" >/dev/null 2>&1
}

# add PATH to the END
_env_cleanup_add _env_path_append
_env_path_append() {
    case ":$PATH:" in
        *":$1:"*) ;;
        *) PATH=${PATH:+$PATH:}$1 ;;
    esac
    _env_debug "path_append $1"
    export PATH
}

# add PATH to the BEGINNING
_env_cleanup_add _env_path_prepend
_env_path_prepend() {
    # remove the existing entry if it exists
    PATH=$(echo ":$PATH:" | sed -e "s|:$1:|:|g" -e 's|^:||;s|:$||')
    PATH=$1${PATH:+:$PATH}
    _env_debug "path_prepend $1"
    export PATH
}

# add INFOPATH to the END
_env_cleanup_add _env_infopath_append
_env_infopath_append() {
    case ":$INFOPATH:" in
        *":$1:"*) ;;
        *) INFOPATH=${INFOPATH:+$INFOPATH:}$1 ;;
    esac
    _env_debug "infopath_append $1"
    export INFOPATH
}

# add INFOPATH to the BEGINNING
_env_cleanup_add _env_infopath_prepend
_env_infopath_prepend() {
    # remove the existing entry if it exists
    INFOPATH=$(echo ":$INFOPATH:" | sed -e "s|:$1:|:|g" -e 's|^:||;s|:$||')
    INFOPATH=$1${PATH:+:$INFOPATH}
    _env_debug "infopath_prepend $1"
    export INFOPATH
}

# add MANPATH to the END
_env_cleanup_add _env_manpath_append
_env_manpath_append() {
    case ":$MANPATH:" in
        *":$1:"*) ;;
        *) MANPATH=${INFOPATH:+$MANPATH:}$1 ;;
    esac
    _env_debug "manpath_append $1"
    export MANPATH
}

# add MANPATH to the BEGINNING
_env_cleanup_add _env_manpath_prepend
_env_manpath_prepend() {
    # remove the existing entry if it exists
    MANPATH=$(echo ":$MANPATH:" | sed -e "s|:$1:|:|g" -e 's|^:||;s|:$||')
    MANPATH=$1${PATH:+:$MANPATH}
    _env_debug "manpath_prepend $1"
    export MANPATH
}

# check os against arg
_env_cleanup_add _env_os_is
_env_os_is() {
    [ "$DOTFILES_OS" = "$1" ]
}

# returns true if bash
_env_cleanup_add _env_is_bash
_env_is_bash() {
    [ -n "$BASH_VERSION" ]
}

# source file(s) if exist
_env_cleanup_add _env_source
_env_source() {
    for f in "$@"; do
        if [ -f "$f" ]; then
            _env_debug "source $f"
            . "$f"
        fi
    done
    unset f
}

# add function to run at the very end
_env_cleanup_add _env_run_after_add
_env_run_after_add() {
   _ENV_RUN_AFTER="$_ENV_RUN_AFTER $*"
}

# run functions at the very end
_env_cleanup_add _env_run_after
_env_run_after() {
    for f in $_ENV_RUN_AFTER; do
        if [ "$(type -t "$f")" = "function" ]; then
            _env_debug "run_after $f"
            "$f"
        fi
    done
    unset _ENV_RUN_AFTER f
}

_env_debug "_env_functions loaded, DOTFILES_OS=$DOTFILES_OS"