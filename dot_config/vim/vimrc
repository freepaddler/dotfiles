set nocompatible        " Use Vim defaults instead of 100% vi compatibility
 
" runtime config
set runtimepath^=~/.config/vim
set runtimepath+=~/.config/vim/after
set packpath+=~/.config/vim
 
" runtime data
" viminfo, backup, swap and undo settings
silent !mkdir -m 4700 -p ~/.local/vim/swap ~/.local/vim/backup ~/.local/vim/undo

set directory=~/.local/vim/swap
set viminfo+=n~/.local/vim/viminfo
" set backupdir=~/.local/vim/backup
set undofile
set undodir=~/.local/vim/undo
" delete undo history after 365 days
let s:undos = split(globpath(&undodir, '*'), "\n")
call filter(s:undos, 'getftime(v:val) < localtime() - (60 * 60 * 24 * 365)')
call map(s:undos, 'delete(v:val)')

" read .vimrc also from local dirs
set exrc
set secure
set modelines=5         " read vim settings from file itself

" setup map leader
let mapleader = " "
 
" setup mouse
if has('mouse')
    set ttymouse=sgr
    set mouse=a
    let g:mouse_enabled = 1
    "--- mouse toggle support
    nnoremap <leader>m :call ToggleMouse()<CR>
    function! ToggleMouse()
        if g:mouse_enabled
            let g:mouse_enabled = 0
            set mouse=
            echo "Mouse disabled"
        else
            let g:mouse_enabled = 1
            set mouse=a
            echo "Mouse enabled"
        endif
    endfunction
endif

" plugins install location
let g:plug_home = expand('~/.config/vim/plugged')

"--- vim-plug ---
silent! call plug#begin()

" clipboard (OSC 52)
Plug 'ojroques/vim-oscyank', {'branch': 'main'}
let g:oscyank_term = 'default'
nmap <leader>c <Plug>OSCYankOperator
nmap <leader>cc <leader>c_
vmap <leader>c <Plug>OSCYankVisual

" syntax check
Plug 'dense-analysis/ale'
nnoremap <leader>[ :ALEPreviousWrap<CR>
nnoremap <leader>] :ALENextWrap<CR>

" lightline status bar
Plug 'itchyny/lightline.vim'
let g:lightline = {
      \ 'colorscheme': 'nord',
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' },
      \ 'component_function': { 'relmod': 'RelativeModifiedTime' },
      \ 'active': {
      \     'left': [ [ 'mode', 'paste' ],
      \               [ 'readonly', 'filename', 'modified', 'relmod' ] ]
      \ }
      \ }

" nord colorscheme
Plug 'arcticicestudio/nord-vim'

call plug#end()

" plugins config"
"
set termguicolors
colorscheme nord

"--- end vim-plug --- 

" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
au BufWrite /tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass" or "vipw"
au BufWrite /private/etc/pw.* set nowritebackup nobackup
au BufWrite /etc/pw.* set nowritebackup nobackup

"--- personal setup ---

" Capture the time the file was saved
autocmd BufWritePost * let b:file_saved_time = localtime()

function! RelativeModifiedTime()
    " Get the current time in seconds
    let l:now = localtime()
    
    if exists('b:file_saved_time')
        let l:time = b:file_saved_time
    else
        return '' " If no times are available, return empty
    endif

    " Calculate the time difference
    let l:diff = l:now - l:time

    " Break the difference into hours, minutes, and seconds
    let l:h = l:diff / 3600
    let l:m = (l:diff % 3600) / 60
    let l:s = l:diff % 60

    " Format the result like 1h2m3s, skip zero values
    let l:result = (l:h > 0 ? l:h . 'h' : '') .
                  \ (l:m > 0 ? l:m . 'm' : '') .
                  \ (l:s > 0 ? l:s . 's' : '') .
                  \ (l:diff > 0 ? ' ago ' : '')

    return l:result
endfunction

"--- interface settings
set wildmenu                " visual autocomplete for command menu
set showcmd                 " display incomplete commands
set laststatus=2            " show always
syntax on                   
set colorcolumn=81          " mark column
hi ColorColumn ctermbg=black
set cursorline              " current line highlight

"" theme fallback
"colorscheme desertold
"highlight MatchParen cterm=bold ctermbg=blue ctermfg=white
"highlight Visual ctermbg=grey
"hi CursorLine cterm=bold ctermbg=NONE
"hi CursorLineNr cterm=bold ctermbg=NONE ctermfg=grey
"" user colors
"hi User1 ctermfg=green
"hi User2 ctermfg=white
"hi User3 ctermfg=cyan
"hi User4 ctermfg=red
"hi User5 ctermfg=grey
"" statusline
"set statusline=
"set statusline+=%1*%F               "filename with path
"set statusline+=\  
"set statusline+=%5*%y               "file syntax
"set statusline+=\  
"set statusline+=%=                  "left/right separator
"set statusline+=%5*%{RelativeModifiedTime()}
"set statusline+=%4*%m               "modified
"set statusline+=%3*%r               "read only
"set statusline+=%2*
"set statusline+=\ %11(%c,%l/%L%)    "current col,line/total
"set statusline+=\ %P                "percent through file

"--- tabs and alignment
set tabstop=4               " \t spaces (view mode)
set softtabstop=4           " \t spaces (edit mode)
set shiftwidth=4            " ident with << >>
set smarttab                " adjusts ts to sts
set expandtab               " spaces instead of \t
autocmd Filetype yaml setlocal et ts=2 sts=2 sw=2
autocmd Filetype json setlocal et ts=2 sts=2 sw=2
autocmd Filetype make setlocal noet
autocmd Filetype go   setlocal noet 
" indents
set autoindent              " save ident for new lines
set cin                     " C-style ident 
set smartindent             " indent for code blocks
set pastetoggle=<C-p>       " disable indent on paste
nnoremap <Leader>p :set invpaste<CR>

"--- navigation
set backspace=indent,eol,start      " backspace everywhere
set nostartofline           " save col when change line
set scrolloff=4             " leave lines on screen top/bottom
set wrap                    " wrap strings
" wrapped strings navigation
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk
" simple leave INSERT mode
inoremap jj <Esc>
inoremap jk <Esc>
" Leader mappings for line navigation
nnoremap <Leader>e $ 
nnoremap <Leader>a ^
nnoremap <Leader>b 0
vnoremap <Leader>e $
vnoremap <Leader>a ^
vnoremap <Leader>b 0
" line numbering
set number
set relativenumber                  
hi LineNr ctermfg=black
function! ToggleLineNumberMode()
    if &number && &relativenumber
        set norelativenumber
    elseif &number
        set nonumber
    else
        set number
        set relativenumber
    endif
endfunction
nnoremap <leader>n :call ToggleLineNumberMode()<CR>

" jump to paired bracket
nnoremap \| %

"--- search
set showmatch               " brackets
set hlsearch                " last search
set incsearch               " incremental
set ignorecase              " case insensitive
set smartcase               " case sensitive if uppercase input
" Map <C-L> (redraw screen) to also turn off search highlighting until the next search
nmap <C-L> :nohlsearch<CR>:redraw!<CR>
nnoremap <leader>h :nohlsearch<CR>

"--- system
set lz                      " lazy redraw
set autoread                " reload if changed out of vim, and no local changes
au CursorHold,CursorHoldI * checktime " reload on cursor hold/invoke default 4s 
" file formats and encoding order
set ffs=unix,mac,dos
set fencs=utf-8,cp1251,koi8-r,cp866
" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" save file with sudo instead of reopening
cmap w!! WForce
cmap WQ! WForceQuit
command WForce :execute ':silent w !$(which sudo || which doas) tee % > /dev/null' | exec "wundo ".escape(undofile(expand('%')),'% ') | :edit!
command WForceQuit :execute 'WForce' | :quit!

" set plugin options on vim rum
"function! SetPluginOptions()
"
" "place options on plugin load here
"
"endfunction
"" apply plugin options on vim enter
"au VimEnter * call SetPluginOptions()

