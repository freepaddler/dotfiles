# POSIX-compatible environment variables profiles manager

vne() {

    VNE_PROFILES_DIR="${VNE_PROFILES_DIR:-${XDG_CONFIG_HOME:-$HOME/.config}/vne}"
    [ -d "$VNE_PROFILES_DIR" ] || mkdir -p "$VNE_PROFILES_DIR"

    # reading config first for overrides
#    VNE_CONFIG_FILE="$VNE_PROFILES_DIR/config"
#    [ -f "$VNE_CONFIG_FILE" ] && . "$VNE_CONFIG_FILE"

    VNE_PROFILES_FILE="$VNE_PROFILES_DIR/profiles"
    # ensure profiles file exists
    [ -f "$VNE_PROFILES_FILE" ] || touch "$VNE_PROFILES_FILE"

    # sequence counter for unique temp files
    TMP_SEQ=0
    _mktemp() {
      seq=$TMP_SEQ
      TMP_SEQ=$((TMP_SEQ + 1))
      tmpfile="$VNE_PROFILES_DIR/profiles.tmp.$$.$seq"
      : >"$tmpfile"
      printf '%s' "$tmpfile"
      unset seq tmpfile
    }

    _cleanup() {
        # remove stale files if any
        find "$VNE_PROFILES_DIR" -maxdepth 1 -type f -name 'profiles.tmp.*' -mtime +0 -delete 2>/dev/null || :
        unset _mktemp TMP_SEQ VNE_CONFIG_FILE VNE_PROFILES_FILE \
            _sanitize _profile_list _profile_show _profile_exists \
            _var_add _var_del _profile_remove _profile_activate \
            _profile_deactivate _profile_active _help \
            profile

    }

    # single blank line before each section and no other empty strings
    _sanitize() {
        awk '
            BEGIN { had_header=0 }
            /^[[:space:]]*$/      { next }
            /^\[.*\]$/ {
                if (had_header) print ""
                print
                had_header=1
                next
            }
            { print }
        '
    }

    _profile_list() {
        grep -E '^\[.+\]' "$VNE_PROFILES_FILE" 2> /dev/null |
            sed -e 's/^\[\(.*\)\]$/\1/' | sort
    }

    # var=value
    _profile_show() {
        profile="$1"
        _sanitize < "$VNE_PROFILES_FILE" | awk -v section="[$profile]" '
            BEGIN { in_section=0 }
            $0==section             { in_section=1; next }
            /^\[.*\]/ && in_section { exit }
            in_section && NF        { print }
            ' 2> /dev/null
    }

    _profile_exists() {
        grep -q "^\[$1\]" "$VNE_PROFILES_FILE" 2> /dev/null
    }

    # add/replace var in profile, create profile if not exists
    _var_add() {
        profile="$1"
        key="$2"
        val="$3"
        exists=1
        _profile_exists "$profile" || exists=0

        # Update existing profile: replace or add the variable within its section
        add_tmp=$(_mktemp) || return 1
        _sanitize < "$VNE_PROFILES_FILE" | awk -v SEC="[$profile]" -v KEY="$key" -v VAL="$val" '
            BEGIN { printed=0; in_section=0 }
            $0==SEC                     { print; in_section=1; print KEY"="VAL; printed=1; next }
            /^\[.*\]/                   { in_section=0 }
            in_section && $1~"^"KEY"="  { next }
            { print }
            END {
              if (!printed) {
                if (!in_section) { print "";  print SEC }
                print KEY"="VAL
              }
            }
        ' >| "$add_tmp" && command mv -f "$add_tmp" "$VNE_PROFILES_FILE"

        if [ "$exists" -eq 0 ]; then
            echo "Profile $profile created."
        fi
        unset key val exists add_tmp
    }

    # del var from profile
    _var_del() {
        profile="$1"
        key="$2"
        del_tmp=$(_mktemp) || return 1
        _sanitize < "$VNE_PROFILES_FILE" | awk -v SEC="[$profile]" -v KEY="$key" '
            BEGIN { in_section=0 }
            $0==SEC                     { print; in_section=1; next }
            /^\[.*\]/                   { in_section=0 }
            in_section && $1~"^"KEY"="  { next }
            { print }
        ' >| "$del_tmp" && command mv -f "$del_tmp" "$VNE_PROFILES_FILE"
        unset key del_tmp
    }

    _profile_remove() {
        profile="$1"
        if ! _profile_exists "$profile"; then
            echo "Profile $profile does not exist."
            return 1
        fi
        _profile_deactivate "$profile"

        remove_tmp=$(_mktemp) || return 1
        _sanitize < "$VNE_PROFILES_FILE" | awk -v SEC="[$profile]" '
            BEGIN { in_section=0 }
            $0==SEC                  { in_section=1; next }
            in_section && /^\[.*\]/  { in_section=0 }
            !in_section              { print }
            ' >| "$remove_tmp" && command mv -f "$remove_tmp" "$VNE_PROFILES_FILE"
        echo "Profile $profile removed."
        unset remove_tmp

    }

    # export profile vars
    _profile_activate() {
        profile="$1"
        if ! _profile_exists "$profile"; then
            echo "Profile $profile does not exist."
            return 0
        fi

        activate_tmp=$(_mktemp) || return 1
        _profile_show "$profile" >| "$activate_tmp"
        while IFS='=' read -r key val; do
            [ -z "$key" ] && continue
            case "$key" in \#*) continue ;; esac
            export "$key"="$val"
        done < "$activate_tmp"
        unset key val
        command rm -f "$activate_tmp"
        echo "Profile $profile activated."
        unset activate_tmp

        # update VNE_PROFILES
        VNE_PROFILES="$VNE_PROFILES $profile"
        VNE_PROFILES="${VNE_PROFILES# }"
        export VNE_PROFILES
    }

    # unset profile vars
    _profile_deactivate() {
        profile="$1"
        case " $VNE_PROFILES " in
            *" $profile "*) ;;
            *) return 0 ;;
        esac

        deactivate_tmp=$(_mktemp) || return 1
        _profile_show "$profile" >| "$deactivate_tmp"
        while IFS='=' read -r key val; do
            [ -z "$key" ] && continue
            case "$key" in \#*) continue ;; esac
            unset "$key"
        done < "$deactivate_tmp"
        unset key val
        command rm -f "$deactivate_tmp"
        echo "Profile $profile deactivated."
        unset deactivate_tmp

        # rebuild VNE_PROFILES
        new=""
        for p in $VNE_PROFILES; do
            if [ "$p" != "$profile" ]; then
                if [ -z "$new" ]; then
                    new="$p"
                else
                    new="$new $p"
                fi
            fi
        done
        VNE_PROFILES="$new"
        export VNE_PROFILES
        unset new p
    }

    _profile_active() {
        if [ -n "$VNE_PROFILES" ]; then
            printf 'active profiles: %s\n' "$VNE_PROFILES"
        else
            printf "no active profiles\n"
        fi
    }

    # Help text
    _help() {
        cat << EOF

vne: manage environment variables profiles

Commands:
  profile list-active           # active profiles
  profile list                  # list defined profiles
  profile activate PROFILE      # export vars in PROFILE
  profile deactivate PROFILE    # unset vars in PROFILE
  profile remove PROFILE        # delete the entire profile
  profile show|get PROFILE      # show vars in_ PROFILE
  var add PROFILE KEY VALUE     # add/update KEY in PROFILE
  var del PROFILE KEY           # remove KEY from PROFILE
  help                          # display this message
EOF
    }

    # dispatch
    cmd="$1"
    [ -z "$cmd" ] && {
        _profile_active
        _cleanup
        return 0
    }
    shift
    case "$cmd" in
        var)
            subcmd="$1"
            shift
            case "$subcmd" in
                add) [ "$#" -eq 3 ] && _var_add "$1" "$2" "$3" || _help ;;
                del) [ "$#" -eq 2 ] && _var_del "$1" "$2" || _help ;;
                *)   _help ;;
            esac
            ;;
        profile)
            subcmd="$1"
            shift
            case "$subcmd" in
                list)           _profile_list ;;
                list-active)    _profile_active ;;
                activate)       [ "$#" -eq 1 ] && _profile_activate "$1" || _help ;;
                deactivate)     [ "$#" -eq 1 ] && _profile_deactivate "$1" || _help ;;
                remove)         [ "$#" -eq 1 ] && _profile_remove "$1" || _help ;;
                get | show)     [ "$#" -eq 1 ] && _profile_show "$1" || _help ;;
                *)              _help ;;
            esac
            ;;
        *)  _help ;;
    esac

    _cleanup
}

## completions
_vne() {
    local cur cmd subcmd active alldefs
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    cmd="${COMP_WORDS[1]}"

    # top-level commands
    local cmds="var profile help"
    if [[ $COMP_CWORD -eq 1 ]]; then
        COMPREPLY=($( compgen -W "$cmds" -- "$cur"))
        return 0
    fi

    case "$cmd" in
        var)
            # var subcommands
            local var_cmds="add del"
            if [[ $COMP_CWORD -eq 2 ]]; then
                COMPREPLY=($(compgen -W "$var_cmds" -- "$cur"))
            elif [[ $COMP_CWORD -eq 3 ]]; then
                alldefs="$(vne profile list)"
                COMPREPLY=($(compgen -W "$alldefs" -- "$cur"))
            fi
            ;;
        profile)
            # profile subcommands
            local prof_cmds="list list-active activate deactivate remove get show"
            if [[ $COMP_CWORD -eq 2 ]]; then
                COMPREPLY=($(compgen -W "$prof_cmds" -- "$cur"))
            elif [[ $COMP_CWORD -eq 3 ]]; then
                subcmd="${COMP_WORDS[2]}"
                case "$subcmd" in
                    activate | remove | get | show)
                        alldefs="$(vne profile list)"
                        COMPREPLY=($(compgen -W "$active $alldefs" -- "$cur"))
                        ;;
                    deactivate)
                        active="$VNE_PROFILES"
                        COMPREPLY=($(compgen -W "$active" -- "$cur"))
                        ;;
                esac
            fi
            ;;
        help) ;;
    esac
}

if _env_cmd complete; then
    complete -F _vne vne
else
    unset _vne
fi
