# colors
_c() {
    case "$1" in
        green_b) printf  '\033[1;32m';;
        green) printf    '\033[0;32m';;
        red_b) printf    '\033[1;31m';;
        red) printf      '\033[0;31m';;
        cyan) printf     '\033[0;36m';;
        yellow) printf   '\033[0;33m';;
        yellow_b) printf '\033[1;33m';;
        magenta) printf  '\033[0;35m';;
        white_b) printf  '\033[1;1m';;
        user) [ $(id -u) -eq 0 ] && _c red_b || _c green_b;;
        *) printf '\033[0m';; # reset color
    esac
}

_ps_host() {
    # tmux shows hostname in status line
    # don't show hostname in local session
    # show hostname in remote session if no tmux
    if [[ -z "$TMUX" && -n "$SSH_TTY" ]]; then
        printf "%s@%s%s%s" "$(_c)" "$(_c yellow)" "$HOSTNAME" "$(_c)"
    fi
}

_ps_git() {
    command -v git &>/dev/null || return
    git rev-parse --is-inside-work-tree &>/dev/null || return

    local ref dirty display upstream ahead behind ab_info

    if ref=$(git symbolic-ref --quiet --short HEAD 2>/dev/null); then
        display="$ref"
    else
        if ref=$(git describe --tags --exact-match 2>/dev/null); then
            display="tag $ref"
        else
            ref=$(git rev-parse --short HEAD 2>/dev/null) || return
            display="$ref"
        fi
    fi

    # Dirty check (fast)
    git diff --quiet --ignore-submodules HEAD 2>/dev/null || dirty="$(_c yellow_b)*"

    # Ahead/behind check
    upstream=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)
    if [ -n "$upstream" ]; then
        ahead=$(git rev-list --count "$upstream"..HEAD 2>/dev/null)
        behind=$(git rev-list --count HEAD.."$upstream" 2>/dev/null)
        if [ "$ahead" -gt 0 ]; then
            ab_info+="$(_c green)+$ahead"
        fi
        if [ "$behind" -gt 0 ]; then
            ab_info+="$(_c red)-$behind"
        fi
        [ -n "$ab_info" ] && ab_info=" $ab_info"
    fi

    printf " %s(%s%s%s%s)%s" "$(_c magenta)" "$display" "$dirty" "$ab_info" "$(_c magenta)" "$(_c)"
}

PS0=
PS1="\n\[\$(_c user)\]\u\$(_ps_host) \[\$(_c cyan)\]\w\$(_ps_git)\n\[\$(_c user)\]❯ \[\$(_c)\]"
PS2="\[\$(_c yellow_b)\]-> \[\$(_c)\]"
SUDO_PS1="\n\$([ \$(id -u) -eq 0 ] && printf \"\[\033[1;31m\]\" || printf \"\[\033[1;32m\]\")\u\$([ -z \"\$TMUX\" ] && [ -n \"\$SSH_TTY\" ] && printf \"\[\033[0m\033[1;37m\]@\[\033[0m\033[0;33m\]\h\") \[\033[0;36m\]\w\[\033[0m\]\n\$([ \$(id -u) -eq 0 ] && printf \"\[\033[1;31m\]#\[\033[0m\]\" || printf \"\[\033[1;32m\]$\[\033[0m\]\") "

export PS1 PS2 SUDO_PS1="$SUDO_PS1"

set_window_title() {
    printf "\033]2;%s\007" "$1"
}

if [ "$TERM_PROGRAM" == "Apple_Terminal" ]; then
    PROMPT_COMMAND="set_window_title${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
else
    PROMPT_COMMAND='printf "\033]0;%s@%s %s\007" "$USER"@"$HOSTNAME" "${PWD/$HOME/"~"}"'
fi

# show last command exit code and execution time
_execution_timer=1 # skip on shell start
function _execution_timer_start() {
    _execution_timer=$(date +%s)
    #echo "_execution_timer_start: _execution_timer=$_execution_timer"
}

_execution_timer_stop() {
    local e="($?)"
    [[ -z "$_execution_timer" || "$_execution_timer" == 1 ]] && return 0
    # fix bad values and return flow
    [[ "$_execution_timer" =~ ^[0-9]+$ ]] || { _execution_timer=1; return; }
    #echo  "_execution_timer_stop: _execution_timer=$_execution_timer TIME=$(date +%s)"

    # make time string
    local diff_ts=$(( $(date +%s) - _execution_timer ))
    [[ $diff_ts == 0 ]] && return 0
    local hours=$(( diff_ts / 3600 ))
    local minutes=$(( (diff_ts % 3600) / 60 ))
    local seconds=$(( diff_ts % 60 ))
    local t
    if ((hours > 0)); then
        t=$(printf "%dh%dm%ds\n" "$hours" "$minutes" "$seconds")
    elif ((minutes > 10)); then
        t=$(printf "%dm%ds\n" "$minutes" "$seconds")
    elif ((minutes > 0)); then
        t=$(printf "%dm%ds\n" "$minutes" "$seconds")
    else
        t=$(printf "%ds\n" "$seconds")
    fi

    printf '\0337'
    local offset=11
    if [ $e = "(0)" ]; then
        printf "%*s" $COLUMNS "${t:+done in $t}"
    else
        e=${e:+$(_c red)failed$e$(_c)}
        printf "%*s" $((COLUMNS+offset)) "${e}${t:+ in $t}"
    fi
    printf '\0338'
    _execution_timer=1
}

PS0='${_execution_timer:0:${BASH_COMMAND:+$((_execution_timer=0))}}'
#trap 'echo "trap: _execution_timer=$_execution_timer"; [[ $_execution_timer == 0 ]] && _timerstart' DEBUG
trap '[[ $_execution_timer == 0 ]] && _execution_timer_start' DEBUG
PROMPT_COMMAND="_execution_timer_stop; $PROMPT_COMMAND"