alias sshconfig="v ~/.ssh/config && resrc"
alias sshexit="ssh -O exit"
alias sshmulti="ssh -M"
alias sshsingle="ssh -o ControlMaster=no"
alias sshx11="ssh -Y"
alias sshinsecure="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

# copy local env to remote host
ssh-cp-env() {
    scp -r ~/.profile ~/.bashrc ~/.bash_profile ~/.inputrc ~/.vimrc ~/.tmux.conf "$1":.
    ssh "$1" mkdir -p .vim/colors/ .config/
    scp -r ~/.vim/colors ~/.vim/autoload "$1":.vim/
    scp -r ~/.config/dotfiles "$1":.config/
}

# delete record from known_hosts
ssh-del-knownhost() {
    if [ $# -eq 0 ]; then
        echo "nothing to delete from known_hosts"
        return 1
    else
        local h
        for h in "$@"; do
            echo "deleting '$h' from known_hosts"
            sed -ri '' "/^\[?$h(\ |\])/d" "$HOME/.ssh/known_hosts" 2>/dev/null || sed -i "/^\[?$h(\ |\])/d" "$HOME/.ssh/known_hosts" 2>/dev/null
        done
    fi
}

if _dotfiles_is_bash; then
    _dotfiles_bash_has_completion ssh || complete -fW \
        "$({ grep -siE '^(host|hostname)' ~/.ssh/config | cut -d' ' -f2; cut -d' ' -f1 ~/.ssh/known_hosts 2> /dev/null; } | grep -v '\*' | sed 's/[][]//g' | sort | uniq)" \
            ssh ssh-copy-id scp sftp sshexit sshmulti sshsingle sshx11 sshinsecure
    _dotfiles_bash_clone_completion ssh ssh-cp-env
    _dotfiles_bash_clone_completion ssh ssh-del-knownhost
fi

# run shell script(s) over ssh
#ssh-run() {
#    local ssh_string="ssh"
#    while [ $# -gt 0 ]; do
#        case $1 in
#            # multiple shell scripts without args
#            --m)
#                local m=yes
#                ;;
#            # one script with args
#            --)
#                shift
#                break
#                ;;
#            *)
#                ssh_string=${ssh_string:+$ssh_string $1}
#                ;;
#        esac
#        shift
#    done;
#    echo "=== === ssh connection string: '$ssh_string'"
#
#    case $1 in
#        sudo|doas)
#            local sudo="$1"
#            echo "=== === using $1"
#            shift
#            ;;
#    esac
#
#    local script
#    [ $# -eq 0 ] && { echo "=== === ERROR: no scripts to run. Usage: ssh-run.sh <ssh connection options> -- <path/to/script(s)>"; return 1; }
#    if [ ! "$m" ]; then
#        echo "=== === running '$*' on remote"
#        script="$1"
#        shift
#        if [ -f "$script" ] && [ -x "$script" ]; then
#            $ssh_string "$sudo /bin/sh -s" < "$script" $* || { echo "=== === ERROR: script execution failed "; return 1; }
#        else
#            echo "=== === can't find or not executable '$script'"
#        fi
#    else
#        for script in $@; do
#            if [ -f "$script" ] && [ -x "$script" ]; then
#                echo "=== === running '$script' on remote"
#                $ssh_string "$sudo /bin/sh -s" < "$script" || { echo "=== === ERROR: script execution failed "; return 1; }
#            else
#                echo "=== === can't find or not executable '$script'"
#            fi
#        done
#    fi
#
#    echo "=== === finished"
#}
#clone_completion ssh ssh-run