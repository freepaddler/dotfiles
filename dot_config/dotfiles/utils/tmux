command -v tmux >/dev/null 2>&1 || return

alias tml="tmux list-sessions"

_tmux-session-selector() {
    t=1
    for arg in "$@"; do
        if [ "$arg" = "-A" ]; then
            t=2 # do not kill detached window
            break
        fi
    done
    tmux new-session "$@" \; set @t "$t" \; choose-tree -Zs \
"run 'tmux set -u @t \; if -F \"#{m:=#S:*,%%}\" \"command-prompt -I \\\"#S\\\" \\\"rename-session %%\\\"\" \"switch-client -t %1; kill-session -t \\\"#S\\\"\"'"
}


_tmux-session-state() {
    if [ -z "$1" ] || ! tmux has-session -t="$1" >/dev/null 2>&1; then
        echo none;

    elif [ $(tmux list-clients -t="$1" 2>/dev/null | wc -l) -gt 0 ]; then
        echo attached
    else
        echo detached
    fi
}

tm() {
    sessions=$(tmux list-sessions 2>/dev/null | wc -l)
    session="main"
    undef=
    [ -z "$1" ] && undef=1 || session="$1"
    state=$(_tmux-session-state "$session")

    if [ $sessions -eq 0 ]; then
        tmux new-session -s "$session"
    elif [ -n "$undef" ]; then
        if [ "$state" = "detached" ] && [ "$sessions" -eq 1 ]; then
            tmux attach-session -t="$session"
        elif [ "$state" = "detached" ]; then
            _tmux-session-selector -A -s "$session"
        elif [ "$state" = "none" ]; then
            _tmux-session-selector -s "$session"
        else
            _tmux-session-selector
        fi
    else
        if [ "$state" = "detached" ] || [ "$state" = "none" ]; then
            tmux new-session -A -s "$session"
        else
            echo "tmux default session is attached already (use 'tm' to manage)"
            tmux ls 2>/dev/null
            return 1
            #_tmux-session-selector
        fi
    fi
}

_tm_complete_sessions() {
  local word cur
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  mapfile -t COMPREPLY < <(tmux ls 2>/dev/null | cut -d: -f1 | grep -E "^${cur}")
}
complete -F _tm_complete_sessions tm

## tmux auto-load
#if  [ -z "$NO_TMUX_AUTOLOAD" ] &&   # once loaded, don't retry on reload
#    [ -z "$TMUX" ] &&               # no tmux in tmux
#    ! is_ish &&                     # no tmux autoload in ish
#    [ -z "$SUDO_USER" ] && [ -z "$DOAS_USER" ]
#then
#    if [[ "$TERM" =~ (tmux|screen) ]]; then
#        echo "terminal may be running screen or tmux (use 'tm' for tmux management)"
#        tmux ls 2>/dev/null
#    else
#        tm TMUX && exit 0
#    fi
#fi
#export NO_TMUX_AUTOLOAD=1

set +x

# short tmux help
tmh() {
    local b="\033[1m"
    local r="\033[0m"
    echo -ne "${b} TMUX Quick Help${r}
\t\t${b}WINDOWS${r}
${b}§ n p l${r}  next/prev/last window
${b}§ c W w${r}  create/rename/list window
${b}§ k K${r}    kill current/all windows
${b}§ d e D${r}  detach/force detach/list clients
\t\t${b}PANES${r}
${b}M-S-arrows / § arrows ${r} select pane
${b}§ | - ${r}      vertical/horizontal split (join with Shift)
${b}§ M-S-arrow${r} resize pane \t${b}§ M-[1-5] / SPACE${r} layout
${b}§ m M${r}       toggle mark/unmark \t${b}§ q${r} show pane numbers
${b}§ x z !${r}     kill/zoom(unzoom)/new window from pane
\t\t${b}VISUAL${r}
${b}§ [/v PgUp${r} enter visual mode  \t${b}§ ]/V =${r} buffer paste/list
${b}SPACE y ENTER${r} selection start/copy/copy and exit
\t\t${b}MISC${r}
${b}§ r R ${r}  reload config / refresh client
${b}§ w s D${r} list windows/sessions/clients (tp detach)
${b}§ : / ?${r} command / check key / help
"
}
