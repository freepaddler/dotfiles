"--- vim-plug ---
silent! call plug#begin()
" syntax check
Plug 'dense-analysis/ale'
nmap <silent> <C-Q> <Plug>(ale_previous_wrap)
nmap <silent> <C-S> <Plug>(ale_next_wrap)

call plug#end()
 
" Configuration file for vima
set modelines=0             " CVE-2007-2438

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible            " Use Vim defaults instead of 100% vi compatibility
set backspace=2             " more powerful backspacing

" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
au BufWrite /tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass" or "vipw"
au BufWrite /private/etc/pw.* set nowritebackup nobackup
au BufWrite /etc/pw.* set nowritebackup nobackup

"--- personal setup ---
set modelines=0             " read vim settings from file itself

"--- interface settings
set wildmenu                " visual autocomplete for command menu
set showcmd                 " display incomplete commands
syntax on                   
colorscheme desertold
highlight MatchParen cterm=bold ctermbg=white 
highlight Visual ctermfg=grey ctermbg=NONE
"set colorcolumn=96          " mark column
"hi ColorColumn ctermbg=darkgray
set cursorline              " current line highlight
hi CursorLine cterm=bold

" Capture the time the file was saved
autocmd BufWritePost * let b:file_saved_time = localtime()

function! RelativeModifiedTime()
    " Get the current time in seconds
    let l:now = localtime()
    
    if exists('b:file_saved_time')
        let l:time = b:file_saved_time
    else
        return '' " If no times are available, return empty
    endif

    " Calculate the time difference
    let l:diff = l:now - l:time

    " Break the difference into hours, minutes, and seconds
    let l:h = l:diff / 3600
    let l:m = (l:diff % 3600) / 60
    let l:s = l:diff % 60

    " Format the result like 1h2m3s, skip zero values
    let l:result = (l:h > 0 ? l:h . 'h' : '') .
                  \ (l:m > 0 ? l:m . 'm' : '') .
                  \ (l:s > 0 ? l:s . 's' : '') .
                  \ (l:diff > 0 ? ' ago ' : '')

    return l:result
endfunction

" user colors
hi User1 ctermfg=green
hi User2 ctermfg=white
hi User3 ctermfg=cyan
hi User4 ctermfg=red
hi User5 ctermfg=grey
" statusline
set statusline=
set statusline+=%1*%F               "filename with path
set statusline+=\  
set statusline+=%5*%y               "file syntax
set statusline+=\  
set statusline+=%=                  "left/right separator
set statusline+=%5*%{RelativeModifiedTime()}
set statusline+=%4*%m               "modified
set statusline+=%3*%r               "read only
set statusline+=%2*
set statusline+=\ %11(%c,%l/%L%)    "current col,line/total
set statusline+=\ %P                "percent through file
set laststatus=2                    "show always

"--- files settings
" viminfo, backup, swap and undo settings 
silent !mkdir -m 4700 -p ~/.vim/swap ~/.vim/backup ~/.vim/undo > /dev/null 2>&1

set directory=~/.vim/swap
set viminfo+=n~/.vim/viminfo
" set backupdir=~/.vim/backup
set undofile
set undodir=~/.vim/undo
" delete undo history after 365 days
let s:undos = split(globpath(&undodir, '*'), "\n")
call filter(s:undos, 'getftime(v:val) < localtime() - (60 * 60 * 24 * 365)')
call map(s:undos, 'delete(v:val)')

" read .vimrc also from local dirs
set exrc
set secure

"--- mouse support
if has('mouse')
    set mouse=a
endif

"--- tabs and alignment
set tabstop=4               " \t spaces (view mode)
set softtabstop=4           " \t spaces (edit mode)
set shiftwidth=4            " ident with << >>
set smarttab                " adjusts ts to sts
set expandtab               " spaces instead of \t
autocmd Filetype yaml setlocal et ts=2 sts=2 sw=2
autocmd Filetype json setlocal et ts=2 sts=2 sw=2
autocmd Filetype make setlocal noet
autocmd Filetype go   setlocal noet 
" indents
set autoindent              " save ident for new lines
set cin                     " C-style ident 
set smartindent             " indent for code blocks
set pastetoggle=<F10>       " disable indent on paste

"--- navigation
set backspace=indent,eol,start      " backspace everywhere
set nostartofline           " save col when change line
set scrolloff=4             " leave lines on screen top/bottom
set wrap                    " wrap strings
" wrapped strings navigation
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk
" line numbering
set number
set relativenumber                  
hi LineNr ctermfg=grey
nmap <C-N> :set relativenumber!<CR>:set number!<CR>
nmap <C-J> :set number<CR>:set relativenumber!<CR>
" jump to paired bracket
nnoremap \| %

"--- search
set showmatch               " brackets
set hlsearch                " last search
set incsearch               " incremental
set ignorecase              " case insensitive
set smartcase               " case sensetive if uppercase input
" Map <C-L> (redraw screen) to also turn off search highlighting until the next search
nmap <C-L> :nohl<CR>

"--- system
set lz                      " lazy redraw
set autoread                " reaload if changed out of vim, and no local changes 
au CursorHold,CursorHoldI * checktime " reload on cursor hold/invoke default 4s 
" file formats and encoding order
set ffs=unix,mac,dos
set fencs=utf-8,cp1251,koi8-r,cp866
" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" save file with sudo instead of reopening
cmap w!! WForce
cmap WQ! WForceQuit
command WForce :execute ':silent w !$(which doas || which sudo) tee % > /dev/null' | exec "wundo ".escape(undofile(expand('%')),'% ') | :edit!
command WForceQuit :execute 'WForce' | :quit!

" set plugin options on vim rum
"function! SetPluginOptions()
"
" "place options on plugin load here
"
"endfunction
"" apply plugin options on vim enter
"au VimEnter * call SetPluginOptions()

