# check if shell is interactive
set +x
if [[ $- != *i* ]]; then
    return
fi

echo bash "$BASH_VERSION"

# check os by kernel
kernel=$(uname -s)
os_is() {
    [ "${kernel,,}" = "${1,,}" ]
}

# check if binary is busybox symlink
is_bb() {
    [[ "$(readlink "$(which "$1")")" = *"busybox" ]]
}

# check if it is ish emulator
is_ish() {
    [[ "$(uname -r)" = *"-ish" ]]
}

### COMMON ENV VARS
export BLOCKSIZE="K"
export EDITOR="vi -e"
export VISUAL="vi"
export LSCOLORS="gxfxcxdxbxegedabagacad"
export LS_COLORS="di=36:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43"
# to disable alternate screen -XF
export LESS="-iRJ -P?f%f .?m(%i/%m) .?ltLn %lt-%lb?L/%L. .?dbPg %db?s/%D. .?e(END) ?x\:n -> %x.:?Pb[%Pb\%]..%t"
export PAGER="less"
# remove duplicates from histiry
export HISTCONTROL="ignoredups"
export HISTSIZE=1000
export HISTFILESIZE=10000
export HISTTIMEFORMAT="%h %d %H:%M:%S "
# append session history to history file upon exit
shopt -s histappend
# save multiline commands as multiline but in one history entry
shopt -s cmdhist
shopt -s lithist
# auto edit mistakes in path
shopt -s cdspell
# show command from history instead running !! !34
shopt -s histverify
# do not accept output replacing existing file >| to force
set -o noclobber
# return error if any of the commands in pipe chain exit > 0
#set -o pipefail

# locales
if locale -a | grep -qwi 'ru_ru\.utf-\?8'; then
    export LANG=ru_RU.UTF-8
    export LC_TYPE=ru_RU.UTF-8
    export LC_COLLATE=ru_RU.UTF-8
fi
export LC_MESSAGES=POSIX
export LC_NUMERIC=POSIX
export LC_TIME=POSIX
export LC_ALL=

umask 0002
### PATH
export CDPATH=.:~
path_append() {
    case ":$PATH:" in
        *:"$1":*) ;;
        *) PATH=${PATH:+$PATH:}$1 ;;
    esac
}
path_prepend() {
    case ":$PATH:" in
        *:"$1":*) ;;
        *) PATH=$1:${PATH:+$PATH} ;;
    esac
}

### SHELL DECORATIONS
# colors
_c() {
    case "$1" in
        green_b) printf '\033[1;32m';;
        red_b) printf '\033[1;31m';;
        red) printf '\033[0;31m';;
        cyan) printf '\033[0;36m';;
        yellow) printf '\033[0;33m';;
        yellow_b) printf '\033[1;33m';;
        white_b) printf '\033[1;1m';;
        user) [ $(id -u) -eq 0 ] && _c red_b || _c green_b;;
        *) printf '\033[0m';; # reset color
    esac
}

if [ "$TERM_PROGRAM" = "tmux" ]; then
    # tmux shows hostname in status line
    host="" 
elif [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    # show hostname in remote session
    host="\[$(_c)\]@\[$(_c yellow)\]\H\[$(_c)\]"
else
    # don't show hostname in local session
    host=""
fi

export PS1="\n\[$(_c user)\]\u$host $(_c cyan)\w\n\[$(_c user)\]❯ \[$(_c)\]"
export PS2="\[$(_c yellow_b)\]-> \[$(_c)\]"

unset host

set_window_title() {
    printf "\033]2;%s\007" "$1"
}


if [ "$TERM_PROGRAM" == "Apple_Terminal" ]; then
    PROMPT_COMMAND="set_window_title${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
else
    PROMPT_COMMAND='printf "\033]0;%s@%s %s\007" "$USER" "$HOSTNAME" "${PWD/$HOME/"~"}"'
fi

# show last command exit code and execution time
# functions are in .bash_functions
BASH_EXEC_TIME="${TMPDIR:-/tmp}/$USER-$BASHPID.td"
_exitcode() {
    local e="($?)"
    local o=11
    [ $e = "(0)" ] && e= && o=0
    local t="$(_gettimediff)"
    tput sc
    e=${e:+$(_c red)failed$e$(_c)}
    printf "%*s" $((COLUMNS+$o)) "${e:-done}${t:+ in $t}"
    tput rc
}
PS0='$(_getstarttime)'$PS0
PROMPT_COMMAND="_exitcode; $PROMPT_COMMAND"

## HOMEBREW
if os_is darwin && [ -x /opt/homebrew/bin/brew ]; then
    path_append "/opt/homebrew/bin:/opt/homebrew/sbin"
    export HOMEBREW_PREFIX="/opt/homebrew"
    export HOMEBREW_CELLAR="/opt/homebrew/Cellar"
    export HOMEBREW_REPOSITORY="/opt/homebrew"
    export INFOPATH=$INFOPATH:/opt/homebrew/share/info
    export MANPATH=$MANPATH:/opt/homebrew/share/man
    export HOMEBREW_CASK_OPTS="--no-quarantine"
    alias brew_requested="brew leaves -r && echo && brew list --cask -1"
    brew_usage() {
        brew list --formula | xargs -n1 -P8 -I {} \
            sh -c "brew info {} | egrep '[0-9]* files, ' | sed 's/^.*[0-9]* files, \(.*\)).*$/{} \1/'" |
            sort -h -r -k2 - | column -t
    }
fi

### AUTOCOMPLETION
# try load completion script if not loaded yet
if ! os_is linux; then
    os_is freebsd && completion_script_lookup="/usr/local/share/bash-completion"
    os_is darwin && completion_script_lookup+="
        ${HOMEBREW_PREFIX:+$HOMEBREW_PREFIX/etc/profile.d}
        /opt/local/etc/profile.d
        "
    for bcsh in $completion_script_lookup; do
        [ "$(type -t _completion_loader)" = "function" ] && break
        [ -f "$bcsh/bash_completion.sh" ] && source "$bcsh/bash_completion.sh"
    done
    unset bsch
    unset completion_script_lookup
fi
# try load custom completions
if [ -n "$BASH_COMPLETION_VERSINFO" ]; then

    custom_completions="$HOME/.bash_completion.d/*"
    os_is darwin && custom_completions+="
       /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash
       /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion
       /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion
       /opt/vagrant/embedded/gems/gems/vagrant-*/contrib/bash/completion.sh
    "
    for f in $custom_completions; do
        # shellcheck disable=SC1090
        [ -f "$f" ] && source "$f"
    done
    unset f
    unset custom_completions
fi

# check if command has completion
has_completion() {
    # completion exists
    complete -p "$1" &> /dev/null && return 0
    # no loader -> no completion
    [ "$(type -t _completion_loader)" = "function" ] || return 1
    # try load completion
    _completion_loader "$1"
    # _minimal default to no completion
    [[ $(complete -p "$1" 2> /dev/null) = *_minimal* ]] || return 0
    # delete _minimal completion -> no completion
    complete -r "$1"
    return 1
}
# clone current completion
clone_completion() {
    if has_completion $1; then
        complete -r $2 &>/dev/null
        $(complete -p $1) "$2"
    fi
}

# if no bash-completion, let's make out life a little bit easier
has_completion man || complete -cf man
has_completion nohup || complete -c -o bashdefault -o default nohup
has_completion su || complete -c -o bashdefault -o default su


### PROGRAMS SETUP
# ssh
has_completion ssh || complete -fW \
    "$({ grep -siE '^(host|hostname)' ~/.ssh/config | cut -d' ' -f2; cut -d' ' -f1 ~/.ssh/known_hosts 2> /dev/null; } | grep -v '\*' | sed 's/[][]//g' | sort | uniq)" \
        ssh ssh-copy-id scp sftp sshexit ssh-multi ssh-single ssh-x11

alias sshconfig="vi ~/.ssh/config && resrc"
alias sshexit="ssh -O exit"
alias ssh-multi="ssh -M"
alias ssh-single="ssh -o ControlMaster=no"
alias ssh-x11="ssh -Y"

# doas
if which doas &> /dev/null; then
    has_completion doas || complete -c -o bashdefault -o default doas
    alias doas="doas "
fi

# sudo
if which sudo &> /dev/null; then
    has_completion sudo || complete -c -o bashdefault -o default sudo
    alias sudo="sudo "
fi

# mysql ldap auth
export LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN=1

# go
if which go &> /dev/null; then
    path_append "$(go env GOPATH)/bin"
    if type gocomplete &> /dev/null; then
        complete -C "$(type -p gocomplete)" go
    fi
    if which godoc &> /dev/null; then
        godocs() {
            killall godoc &> /dev/null
            GO111MODULE=off godoc -index &> /dev/null &
            disown $!
        }
    fi
fi

# docker
if which docker &> /dev/null; then
    has_completion docker || complete -W "$(docker ps -a --format '{{.Names}}' 2>/dev/null; docker image ls --format '{{.Repository}}:{{.Tag}}' --filter "dangling=false" 2>/dev/null)" docker
    alias drm="docker run --rm"
    alias dps='docker ps --format "table {{.Names}}\\t{{.RunningFor}}\\t{{.Status}}\\t{{.Image}}"'
fi

### ALIASES
alias resrc="source ~/.bashrc"
alias bashrc="vi ~/.bashrc && resrc"
alias root="su -m root"
alias hosts="vi /etc/hosts"

alias ls="ls -G"
os_is linux && alias ls="ls --color=auto"
alias l="ls -F"
alias ll="ls -lhF"
alias la="ls -alhF"
alias li="ls -alhFi"
os_is freebsd && alias le="ls -alhFio"
os_is darwin && alias le="ls -alhFiOe@";

alias rm="rm -iv"
alias rmrf="rm -frv"
alias cp="cp -iv"
alias cpr="cp -iRv"
alias mv="mv -iv"

alias du="du -h"
alias df="df -h"

alias j="jobs -l"
alias h="history 25"
alias p="ps uw"
os_is linux && alias p="ps fuw"
is_bb ps && alias p="ps -o user,pid,ppid,vsz,rss,tty,stat,time,args"

alias t="top"
which htop &> /dev/null && alias t="htop"

alias grep="grep --color"
which igrep &> /dev/null || alias igrep="grep -i"
alias fgrep="fgrep --color"
alias egrep="egrep --color"

which screen &> /dev/null && alias sc="screen -U"
which vim &> /dev/null && {
    alias vi="vim -X"
    export VISUAL="vim -X"
}
alias vimrc="vi ~/.vimrc"

if [ "$(chezmoi execute-template '{{ .chezmoi.config.data.private }}' 2>/dev/null)" = "true" ]; then
    alias cz="chezmoi "
    alias cze="chezmoi edit"
    alias bashrc="chezmoi edit ~/.bashrc && resrc"
    alias vimrc="chezmoi edit ~/.vimrc"
    alias sshconfig="chezmoi edit ~/.ssh/config && resrc"
fi

which glow &> /dev/null && alias mdless="glow -p"
os_is darwin && alias plu="plutil -p"

if which ansible &> /dev/null; then
    alias ansible-roledir="mkdir -p {defaults,files,templates,handlers,tasks} && touch {defaults,handlers,tasks}/main.yml"
    alias ansible-hostvars='ansible -m debug -a "var=hostvars[inventory_hostname]"'
fi

if which iptables &> /dev/null; then
    alias iptl="iptables --line-numbers -vnL "
    alias ipt="iptables "
fi

# git
if which git &> /dev/null; then
    alias gs="git status"
    alias ga="git add ."
    alias gco="git checkout"
    alias gcm="git commit -m"
    alias gcma="git commit -a -m"
    alias gi="git remote show origin"
    alias gl="git log --all --decorate --oneline --graph --date-order"
    alias glb="git log --oneline --decorate --walk-reflogs"
    alias gb="git branch -vv"
    alias gf="git fetch --tags --prune"
    alias gp="git push"
    alias gu="git pull"
fi

# vagrant
which vagrant &>/dev/null && alias vagrant-gui="GUI=1 vagrant "

### +BY OS
if os_is darwin; then
    export COPYFILE_DISABLE=true
    # remove macOS zsh warning
    export BASH_SILENCE_DEPRECATION_WARNING=1
    # python path
    # shellcheck disable=SC2045
    for ver in $(ls -r ~/Library/Python/); do
        path_append ~/Library/Python/"$ver"/bin
    done
    unset ver
    # ssh-keygen override
    complete -f ssh-keygen
    # logout other macos user
    logout_force() {
        sudo launchctl bootout "user/$(id -u "$1")"
    }
    iina_reset_cache() {
        defaults delete com.colliderli.iina recentDocuments
    }

fi

### PATH EXPORT
path_append ~/.local/bin
export PATH

### import functions
[ -f "$HOME/.bash_functions" ] && source "$HOME/.bash_functions"

# add all aliases completions
# https://github.com/cykerway/complete-alias
[ -n "$BASH_COMPLETION_VERSINFO" ] && complete -F _complete_alias "${!BASH_ALIASES[@]}"

### UNSET global
unset os_is kernel is_bb is_ish
unset has_completion clone_completion
unset path_append path_prepend

### exit routines
_onExit() {
    [ -n "$BASH_EXEC_TIME" ] && rm -f "$BASH_EXEC_TIME" &>/dev/null
}

trap _onExit EXIT

### tmux
if [ -z "$TMUX" ] && [[ ! "$TERM" =~ tmux ]] && which tmux &>/dev/null; then                       
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then # ssh                                       
        first_free="$(tmux ls | grep -vm1 attached | cut -d: -f1)"                                            
        [ -n "first_free" ] && tmux a -t "$first_free" || tmux new-session                         
    else # local                                                                                   
        # no TMUX session or TMUX session is attached                                              
        if ! tmux has-session -t TMUX &>/dev/null ||                                               
                tmux ls -F '#{session_name}:#{session_attached}' | grep -q ^TMUX:0; then           
            tmux new-session -A -s TMUX && exit 0                                                  
        else                                                                                       
            echo default TMUX session is attached                                                  
        fi                                                                                         
    fi                                                                                             
fi 
